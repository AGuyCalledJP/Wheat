<Geometry>:
    id: geometry
    geom: geometry
    interactive_space: interactive_space
    FloatLayout:
        id: geo
        # FloatLayout:
        GridLayout:
            cols: 2
            id: headerbar
            pos_hint: {'x' : 0, 'y' : .9}
            size_hint: 1, 0.1
            # canvas.before:
            #     Color:
            #         rgba: geometry.left_pane_bg_color
            #     Rectangle:
            #         pos: self.pos
            #         size: self.size
            GridLayout:
                rows: 1
                id: header
                padding: 5
                spacing: 5
                pos_hint: {'x' : 0, 'y' : .9}
                size_hint: .66, 1
                canvas.before:
                    Color:
                        rgba: geometry.left_pane_bg_color
                    Rectangle:
                        pos: self.pos
                        size: self.size
                CheckBox:
                    id: check
                    pos_hint: {'x': 0,'y': 0}
                    size_hint: .1,1
                    canvas.before:
                        Color:
                            rgba: geometry.button_bg_color
                        Rectangle:
                            pos: self.pos
                            size: self.size
                ToggleButton:
                    state: "normal"
                    id: hide_right_button
                    pos_hint: {'x': .46, 'y': 0}
                    size_hint: .2, 1
                    text: "Hide Buttons"
                    background_color: geometry.button_bg_color
                    color: geometry.white
                    on_press:
                        headerbar.size_hint_x: .66              if hide_right_button.state == "down" else 1
                        right_pane.hide_pane()                  if hide_right_button.state == "down" else right_pane.hide_pane(dohide=False)
                        # headerspace.size_hint_x: 0              if hide_right_button.state == "down" else .34
                        hide_right_button.text: "Unhide"        if hide_right_button.state == "down" else "Hide Buttons"
                        hide_right_button.size_hint_x: .303     if hide_right_button.state == "down" else .46
                        hide_right_button.pos_hint_x: .697      if hide_right_button.state == "down" else .2

            FloatLayout:
                id: headerspace
                size_hint_x: .33
                # canvas.before:
                #     Color:
                #         rgba: geometry.left_pane_bg_color
                #     Rectangle:
                #         pos: self.pos
                #         size: self.size

        FloatLayout:
            id: body
            pos_hint: {'x' : 0, 'y' : 0}
            size_hint: 1, 0.9
            BoxLayout:
                id: left_pane
                orientation: 'vertical'
                pos_hint: {'x' : 0 ,'y' : 0}
                size_hint: .66,1
                padding: 20
                spacing: 10
                canvas.before:
                    Color:
                        rgba: geometry.left_pane_bg_color
                    Rectangle:
                        pos: self.pos
                        size: self.size
                Interactive_Space:
                    id: interactive_space
                    pos_hint: {'x' : 0, 'y' : .1}
                    size_hint: 1, 0.9
                    canvas.before:
                        Color:
                            rgba: geometry.white
                        Rectangle:
                            pos: self.pos
                            size: self.size
                    on_touch_down:
                        # geometry.connect_interactive_space(interactive_space)
                        geometry.touch_interactive_space(*args)
                Result:
                    id: result_space
                    pos_hint: {'x' : .1, 'y' : 0}
                    size_hint: .9, 0.1
                    text_size: self.size
                    padding: 20,0
                    halign: 'left'
                    valign: 'middle'
                    canvas.before:
                        Color:
                            rgba: geometry.white
                        Rectangle:
                            pos: self.pos
                            size: self.size

                    # PointLayout:


            RightPane:
                id: right_pane
                padding: 5
                pos_hint: {'x' : .66 ,'y' : 0}
                size_hint: .34,1
                canvas.before:
                    Color:
                        rgba: geometry.white
                    Rectangle:
                        pos: self.pos
                        size: self.size
                GridLayout:
                    padding: 5
                    cols: 1
                    id: mode_buttons
                    pos_hint: {'x' : 0, 'y' : .67}
                    size_hint: 1, .33
                    canvas.before:
                        Color:
                            rgba: geometry.white
                        Rectangle:
                            pos: self.pos
                            size: self.size
                    #TODO: figure out how to alter togglebuttons so they can't all be deselected.
                    #NOTE: behavior likely isn't actually leaving the mode_state invalid, it's just not displaying correctly to the user end
                    ToggleButton:
                        id: add_mode_button
                        state: 'down'
                        group: "modes"
                        text: "Add Mode"
                        color: geometry.white
                        background_color: geometry.button_bg_color
                        on_press:
                            geometry.change_mode('adding')
                            distance_button.hide_opp() ## NOTE: for some reason trying to consolidate these hide opps into hides on the layouts breaks everything
                            angle_button.hide_opp()
                            area_button.hide_opp()
                            perimeter_button.hide_opp()
                            centroid_button.hide_opp()
                            make_figure_button.hide_make(False)
                            cancel_figure_button.hide_make(False)
                    #TODO: figure out how to alter togglebuttons so they can't all be deselected.
                    #NOTE: behavior likely isn't actually leaving the mode_state invalid, it's just not displaying correctly to the user end
                    ToggleButton:
                        id: move_mode_button
                        group: "modes"
                        text: "Move Mode"
                        color: geometry.white
                        background_color: geometry.button_bg_color
                        on_press:
                            geometry.change_mode('moving')
                            distance_button.hide_opp()
                            angle_button.hide_opp()
                            area_button.hide_opp()
                            perimeter_button.hide_opp()
                            centroid_button.hide_opp()
                            make_figure_button.hide_make()
                            cancel_figure_button.hide_make()
                    #TODO: figure out how to alter togglebuttons so they can't all be deselected.
                    #NOTE: behavior likely isn't actually leaving the mode_state invalid, it's just not displaying correctly to the user end
                    ToggleButton:
                        id: select_mode_button
                        group: "modes"
                        text: "Select Mode"
                        color: geometry.white
                        background_color: geometry.button_bg_color
                        on_press:
                            geometry.change_mode('selecting')
                            distance_button.hide_opp(False)
                            angle_button.hide_opp(False)
                            area_button.hide_opp(False)
                            perimeter_button.hide_opp(False)
                            centroid_button.hide_opp(False)
                            make_figure_button.hide_make()
                            cancel_figure_button.hide_make()


                Label:
                    id: separating_line
                    pos_hint: {'x' : 0, 'y' : .66}
                    size_hint: 1, .01
                    canvas.before:
                        Color:
                            rgba: geometry.separator_color
                        Rectangle:
                            pos: self.pos
                            size: self.size

                GridLayout:
                    padding: 5
                    cols: 1
                    id: operation_buttons
                    pos_hint: {'x' : 0, 'y' : 0}
                    size_hint: 1, .66
                    canvas.before:
                        Color:
                            rgba: geometry.white
                        Rectangle:
                            pos: self.pos
                            size: self.size

                    MakeFigureButton:
                        id: make_figure_button
                        text: "Make Figure"
                        color: geometry.white
                        background_color: geometry.button_bg_color
                        on_press:
                            geometry.make_figure()

                    MakeFigureButton:
                        id: cancel_figure_button
                        text: "Cancel Figure Creation"
                        color: geometry.white
                        background_color: geometry.button_bg_color
                        on_press:
                            geometry.cancel_figure()

                    OppButton:
                        id: distance_button
                        text: "Find Distance"
                        color: geometry.white
                        background_color: geometry.button_bg_color
                        on_press:
                            result_space.update_result(geometry.calculateDistance())
                            # geometry.deselect_all()

                    OppButton:
                        id: angle_button
                        text: "Find Angle"
                        color: geometry.white
                        background_color: geometry.button_bg_color
                        on_press:
                            result_space.update_result(geometry.calculateAngle())
                            # geometry.deselect_all()

                    OppButton:
                        id: area_button
                        text: "Find Area"
                        color: geometry.white
                        background_color: geometry.button_bg_color
                        on_press:
                            result_space.update_result(geometry.calculateArea())
                            # geometry.deselect_all()

                    OppButton:
                        id: perimeter_button
                        text: "Find Perimeter"
                        color: geometry.white
                        background_color: geometry.button_bg_color
                        on_press:
                            result_space.update_result(geometry.calculatePerimeter())
                            # geometry.deselect_all()

                    OppButton:
                        id: centroid_button
                        text: "Find Centroid"
                        color: geometry.white
                        background_color: geometry.button_bg_color
                        on_press:
                            result_space.update_result(geometry.calculateCentroid())
                            # geometry.deselect_all()
<PointLayout>:
    # id: point

<PointButton>:
    on_press:
        # .check_boundaries(touch.x, touch.y) FIXME where do i need to put this function to detect touch on point and look at dimensions of interactive_space
